{% extends "base.html.twig" %}

{% block title %}Redovisningar{% endblock %}

{% block content %}
<h1>Redovisningar</h1>

<h2>Kmom01</h2>
<div class="reporttext">
    <p>Jag har tidigare arbetat med PHP i kursen Webtec och i kursen design blev jag bekant med Twig och
    fördjupade mina kunskaper inom style CSS. Innan jag började studera på BTH Webbprogrammering hade jag
    förkunskaper i grunderna om HTML och CSS från kursen Webbutveckling på gymnasiet. Där läste jag också
    kursen Programmering 2 där jag arbetade med grunderna i objektorienterad programmering i Python.</p>
</div>

<div class="reporttext">
    <p>Innan man börjar med att skapa egna klasser i PHP bör man känna till språket. Det innebär bland
    annat att man vet hur man deklarerar variabler, delar upp sin kod i filer, hur man använder operatorer,
    strängar, arrayer, if-satser, loopar. Det är bra om man vet hur man använder fördefinierade variabler
    som $_SERVER och $_SESSION. Det är också bra om man känner till inbyggda funktioner som header().
    Inom klasser är det bra att ha kännedom om mutable/immutable objekt, alltså om objektet kan ändras på
    i efterhand. Det är också bra att veta när man ska göra variabler och metoder privata eller publika i
    klasser.</p>
</div>

<div class="reporttext">
    <p>Stukturen i me/report upplevde jag först vara lite krånglig och omfattande. Men jag börjar komma in i
    strukturen allt mer. Det finns många filer som behöver finnas för att det ska fungera, men jag behöver
    inte skapa eget innehåll i många av filerna. Det är främst i mapparna public, src och templates jag
    behöver arbeta.</p>
</div>

<div class="reporttext">
    <p>När jag läser artikeln “PHP The Right Way” tänker jag på att jag i min kod vill utnyttja så mycket som
    möjligt av det som språket PHP erbjuder. Jag ser fram emot att lära mig mer om klasser och se om det finns
    några begränsningar jämfört med andra programmeringsspråk. Jag ser även fram emot att koppla PHP mot
    databaser. Något som jag också är viktigt är felhantering, hur man kan göra exceptions för att hantera
    när något går fel.</p>
</div>

<p>Mitt TIL för detta kursmoment är att jag kommit igång med Symfony och skapat en webbplats.</p>

<h2>Kmom02</h2>
<div class="reporttext">
    <p>Arv innebär att en klass ärver från en annan klass. Klassen som ärver är en subklass till basklassen.
    Subklassen kommer få tillgång till det publika från basklassen, som t.ex. publika attribut eller
    publika metoder. Subklassen kan även ha egna egenskaper och metoder samt överladda metoder.
    class B extends A betyder att B är subklass till basklassen A och ärver det publika från A.</p>

<div class="reporttext">
    <p>Komposition innebär att en klass består av en annan klass. I kortspels uppgiften består klassen
    kortlek av klassen kort och klassen hand av klassen kort.</p>
</div>

<div class="reporttext">
    <p>Interface är definierat som “Ett kontrakt där en klass lovar att erbjuda en viss uppsättning metoder”.
    Ett interface kan innehålla koden “public function setVariable($name, $var). Det betyder att de klasser
    som använder sig av interfacet behöver ha en metod setVariable($name, $var) för att uppfylla löftet.
    Interface är ett sätt att göra koden förberedd för återanvändning.</p>
</div>

<div class="reporttext">
    Trait används istället för multipelt arv som inte stöds i PHP. Det är ett sätt för en klass att ärva
    från flera basklasser. Trait är bra att använda när det finns kod som är användbar i flera klasser.</p>
</div>

<div class="reporttext">
    <p>Jag löste veckans uppgift i flera steg. Inledningsvis implementerade jag mina klasser och testade i
    terminalen genom att köra php-filerna. Det fungerade bra och jag övergick till att få till det på webben
    med Symfony och Twig.</p>
</div>

<div class="reporttext">
    <p>Det fungerade bra att lösa uppgiften i Symfony också. Det svåraste var att få till korten att visas på
    ett bra sätt. Jag använde unicode icons och CSS kod för att få till det. Det blev en ganska enkel variant,
    men det framgår också tydligt vad kortet har för färg och värde. Jag använder for-loopar för att loopa
    igenom array med alla kortobjekt och if-satser för att kolla om det är ett rött eller svartfärgat kort.
    För att få till det med att för varje spelare visa spelarens hand behöver jag en ytterligare for-loop som
    loopar igenom för varje spelare. Varje spelare får också ett unikt id som gör att man ser vilka kort som
    tillhör vilken spelare. Json-delen blev lite utmanande att få till på ett snyggt sätt. Unicode ikonerna
    visades inte och utskriften blev inte så snygg till en början. Jag sökte ett tag på internet innan jag
    hittade en lösning. Jag använder pretty_print och unescaped_unicode.</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig mer om konstruktioner i PHP, som arv, interface och trait.</p>

<h2>Kmom03</h2>
<div class="reporttext">
    <p>Att modellera ett kortspel med flödesdiagram och pseudokod har varit en ny bekantskap för mig.
    Jag har tidigare gjort klassdiagram och ER-modellering. Det blev ett bra hjälpmedel att göra det
    innan jag börjar programmera, då vet jag hur logiken ska fungera. Jag är dock lite osäker på hur mycket
    som ska tas med i flödesdiagram och pseudokod som anrop till metoder. Det är inte fullständiga lösningar
    som jag lämnar in, ser det främst som ett bra sätt att börja tänka innan programmeringen.</p>
</div>

<div class="reporttext">
    <p>Jag lär mig mer och mer om objektorientering i PHP och hur man bör tänka med privata/publika metoder
    och attribut. I kmom03 gjorde jag funktioner som returnerade spelaren och bankens hand och summa,
    i stället för att ha variablerna publika. I kmom02 blev det lite mycket som var publikt och det är
    något jag kommer tänka på ännu mer framöver. Att skriva snygg kod är en utmaning för mig som fortfarande
    lär mig mer om objektorientering i PHP. Jag har tänkt en del på det under arbetets gång. Efter att ha
    kört valideringen på högsta nivå 9 så fick jag många anmärkningar. Jag valde att främst lösa de med att
    deklarera variabler och vad metoderna returnerar. Jag skapade också en ny kontroller för spelet. En del
    anmärkningar känns som att jag behöver mer kunskap innan jag kan lösa de på ett bra sätt. Det finns mycket
    som kan göras bättre för att få snygg kod. Bland annat borde korten läggas till i spelarens hand i
    handklassen och inte i spelklassen, för att avlasta på koden där. Spelklassen kan också delas upp i flera klasser.</p>
</div>

<div class="reporttext">
    <p>Veckans arbete gick bra att genomföra. Direkt när jag läste uppgiften såg jag ett potentiellt problem:
    Hur ska jag hantera att ess kan vara 1 eller 14? Ett alternativ hade varit att skapa en knapp där användaren
    bestämmer värde. Jag valde dock att bestämma detta åt användaren, jag tänker att man vill komma så nära 21
    som möjligt men inte över. Därför kollar jag om spelarens handsumma är mindre än 8 och i så fall räknas ess
    som 14. Om summan överstiger 21 med ess räknat som 14 räknas istället ess som 1. Samma logik används för
    banken, som tar nya kort fram till summan 18 eller högre. Ett annat problem som jag inte räknat med var vilka
    knappar som skulle synas. När spelet hade en vinnare ville jag inte längre att användaren skulle kunna dra fler
    kort, utan istället ha en knapp för nytt spel. Jag försökte hitta någon if-sats att stoppa in, men mina försök
    misslyckades och jag fick använda session till det.</p>
</div>

<p>Mitt TIL för detta kursmoment är att jag lärt mig mer om hur man kan skriva snygg kod.</p>

<h2>Kmom04</h2>
<div class="reporttext">
    <p>Det är viktigt att testa sin kod så man upptäcker eventuella fel, att koden inte gör det man vill. Testningen
    är lik den vi gjorde i kursen oopython. Jag använde manualen för att se vilka olika assertions jag kan använda.
    Jag upplever att PHPUnit är ett mycket bra verktyg som är enkelt att förstå för att testa sin kod.</p>
</div>

<div class="reporttext">
    <p>Kodtäckningen blev totalt nästan 90%. Det blev 100% på alla klasser förutom Game som blev 85% vilket jag
    ändå är ganska nöjd med. Jag hade behövt göra en del ändringar i min kod för att testa de sista metoderna.</p>
</div>

<div class="reporttext">
    <p>Min kod är till största delen testbar. Det som kan vara svårt att testa är t.ex. shuffleCards där alla kort
    blandas och se att de verkligen blandas. Teoretiskt sätt skulle den blanda korten på samma sätt de redan är
    sorterade. Det var också klurigt att testa winner-metoderna, där jag inte riktigt lyckades testa så möjliga fall.</p>
</div>

<div class="reporttext">
    <p>Jag valde att inte göra några större förändringar i min kod då jag tycker att den är väldigt testbar.
    Den ända ändringen var att jag lade till en returnering av senaste dragna korten i min Game-klass för att
    göra den mer testbar. Om jag skulle gjort mer ändringar hade jag sätt till att ha mindre variabler publika
    och istället ha små metoder som returnerar variabeln, alltså tänkt mer på get/set metoder. Några metoder kan
    delas upp mer och jag skulle kunna göra en egen klass för handen och då omstrukturerat min kod. Jag hade kunnat
    göra mina metoder för att kontrollera vinnare på ett bättre strukturerat sätt.</p>
</div>

<div class="reporttext">
    <p>Testbar kod kan identifiera snygg och ren kod på det sättet att om en metod eller funktion gör mycket
    (innehåller mycket kod) så blir det svårare att testa. Det bästa ur testperspektivet är att ha små klasser och
    små metoder, vilket gör att koden blir både mer lättläst, lätt att förstå och lätt att testa.</p>
</div>

<div class="reporttext">
    <p>Uppgiften gick utan problem med undantag för att jag hade gjort misstag i mina mappnamn och namespace.
    Det gjorde att det blev konflikt med composer require —dev symfony/test-pack som gjorde att testerna först
    inte hittade mina klasser genom namespace.</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig att göra enhetstester med phpunit.</p>

<h2>Kmom05</h2>
<div class="reporttext">
    <p>Den här veckan har jag arbetat med att integrera applikationskod med databasen i ramverket Symfony.
    Övningen fungerade bra och visade på ett bra sätt hur jag gör för att komma igång med Doctrine ORM i me/report.
    Tyvärr fungerade inte .env.local filen för mig, det blev problem på studentservern. Jag behövde manuellt ändra
    i .env och låta bli att uppdatera den till mitt git-repo eftersom den då innehåller känslig information.</p>
</div>

<div class="reporttext">
    <p>När jag gjorde uppgiften kunde jag jämföra med databas-kursen där vi också gjort CRUD och använt formulär.
    Jag föredrar än så länge det sättet vi gjorde i databas-kursen för där har jag själv mer koll på koden.
    I Symfony genereras en del kod som jag som utvecklar inte alltid kan ändra så enkelt. Användargränssnittet
    blev bra när det gäller formulären, men tabellen hade jag kunnat göra på ett bättre sätt. Med en bild som
    ska visas upp och en del kolumner skulle jag när jag tänker i efterhand inte gjort en tabell, utan visat
    informationen på ett annat sätt med annan styling. Det blir lätt mycket information på liten plats och
    inte så snygg design med tabeller.</p>
</div>

<div class="reporttext">
    <p>Utöver problemet på studentservern så fick jag ett mer oväntat problem, som jag inte räknat med. Jag satte
    ISBN till att vara en int/number. Problemet som jag upptäckte på studentservern var att ISBN alltid blev
    2147483647 vilket det blir när talet är så stort så det inte kan lagras i 32 bitar. Det fungerade när jag
    testade lokalt. På studentservern blev det error och kraschade sidan när jag försökte addera eller uppdatera
    en produkt med mer än 9 siffror (ISBN består av mer än 9 siffror). Jag behövde då ändra typen på ISBN till
    sträng för att det skulle fungera. Hade jag använt samma sätt som i databaskursen hade det inte varit något
    problem eftersom det bara skulle ändras i databas-koden. Här behöver jag ändra på flera ställen och köra
    kommandon i terminalen för att få det att uppdatera, vilket är mer omständligt.</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig att koppla samman databaser med ramverket Symfony.</p>

<h2>Kmom06</h2>
<div class="reporttext">
    <p>Phpmetrics är ett bra verktyg för att få en bekräftelse på hur bra kod man gör utifrån de 4C. Jag tror
    dock att det är ännu mer effektivt på större projekt, mycket av resultaten från phpmetrics var som jag trodde.
    Det är just de 4C som jag tycker är mest intressanta att kolla på då de ger bra svar på kodkvalitet.</p>
</div>

<div class="reporttext">
    <p>Scrutinizer var synd att det inte gick att få fram värden på cohesion och coupling. Det är också ett
    tydligt verktyg för att se komplexitet och kodtäckning. Eventuellt såg jag inte riktigt så många fördelar
    med Scrutinizer dock. Kodtäckningen kan man ju få fram till build/coverage som vi lärde oss i kmom04 med
    composer phpunit. Att totala kodtäckningen är runt 30% som man får fram i badges är också lite ointressant
    eftersom vi inte gör tester för bland annat kontrollerklasserna. Övriga mätvärden i badges var bra så jag
    ser det som ett tecken på att min kod är ganska bra enligt Scrutinizer.</p>
</div>

<div class="reporttext">
    <p>Just att påvisa kodkvalitet genom badges tror jag på till viss del. Det blir ju lite motvisade med
    kodtäckning runt 30% som jag var inne på tidigare. Kodkvalité är viktigt för att en kollega på ett företag
    ska förstå min kod. Då fungerar det inte med dåliga resultat eller otydlig kod. Jag tycker att man kan
    använda Scrutinizer och phpmetrics men man behöver också analysera mätvärdena mer noggrant. Inte bara kolla
    på badges och säga att 30% är katastrof när man inte vet vad det beror på. Annars tycker jag att verktyg
    som phpcpd, phpmd och phpstan också kan säga mycket om kodkvalité och inte minst om på vilken nivå man
    ligger med phpstan.</p>
</div>

<div class="reporttext">
    <p>Veckans arbete gick bra, men det var svårt att hitta saker att förbättra utan att göra mer omfattande
    ändringar i klasserna. Jag har svårt för att ändra i kod som fungerar, det är så lätt att man gör ändringar
    och sedan fungerar det inte längre. Jag föredrar därför att göra tester och köra validering samtidigt som
    programmerar. Det är svårare att göra detta i efterhand. Att mina värden i phpmetrics och scrutinizer också
    var väldigt bra redan på förhand försvårade ju också denna uppgift :)</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig mer om testning för min kod.</p>

<h2>Kmom10</h2>
<h3>Krav 1-3</h3>
<div class="reporttext">
    <p>Jag valde att göra en variant på poker, pokerpatiens som projekt. Det skulle bli en utmaning att koda
    spelet och redan på förhand såg jag en del potientiella problem. Som till exempel vad som ska hända när man
    trycker på en box. Jag hade med fördel kunnat använda JavaScript, men eftersom jag ville använda det jag lärt
    mig i kursen använde jag istället GET och POST. Varje box som inte har ett kort blir en input-form som går
    att klicka på. Jag ger varje box ett ID som value och döljer det med CSS font-size: 0. Även om spelaren inte
    ser det finns det ett ID på varje box. Sedan kopplar jag ihop ID på den valda boxen med det senaste dragna
    kortet så att kortet läggs på boxen, som då inte längre går att klicka på.</p>
</div>

<div class="reporttext">
    <p>Det behövs en del ytterligare kod för att det ska fungera bra. Exempelvis ska det inte slumpas fram ett
    nytt kort när alla boxar har ett kort. Poängräkningen var ett annat tänkbart problem. Där gjorde jag så att
    poängräkningen sker först när alla boxar har ett kort. Det skulle inte heller gå att ladda om sidan och då
    räkna poängen igen, krävdes en bool-variabel för att undvika det. Om en hand ger poäng för Royal flush
    behöver inte de andra regel-metoderna anropas. Jag gjorde därför en metod där regel-metoderna anropas i
    ordning efter högst poäng och sedan returneras poängen för den regeln. Ger inte handen någon poäng blir
    det 0 som returneras. Eftersom det är tio möjliga utfall blev denna metod för komplex och fick delas upp
    i två metoder.</p>
</div>

<div class="reporttext">
    <p>Jag har klasser för Card, Deck, Board och Hand. Jag skulle kunna göra ännu fler klasser men är i
    slutändan ändå hyfsad nöjd med resultatet. Pokerpatiens är ett komplext spel, och det blir mycket
    if-satser, “om handen innehåller detta, annars om…”. Därav ganska dåliga värden på komplexiteten.
    Jag la mycket fokus på att koden skulle vara testbar, även om det är omöjligt att få tid att testa alla
    tusentals kombinationer på händer. Varje regel-metod täcks av ett testfall där jag förväntar mig att
    poäng ges för en hand med specificerade värden. Tyvärr blev mina kontrollerklasser för spelet för stora,
    men det är en avvägning jag gjort. Det behöver användas session, hantera vilket typ av POST man får in
    från användaren och lägga till poäng i databasen och då blir det en del kod. Hade jag delat upp kontrollern
    kanske inte spelaren skulle kunna fuska och jag såg en risk att koden inte skulle bli så enkel att testa.</p>
</div>

<div class="reporttext">
    <p>En databas används för att spara poäng efter varje omgång och nollställer poängen vid reset. När det
    gäller att satsa låtsaspengar fick jag hitta på en egen lösning. Det blev att spelaren innan varje omgång
    tvingas satsa minst 50 “kronor” på att man får över 200 i poäng. Tanken är att man vinner x antal summan om
    man får över 200 poäng, annars förlorar man satsade pengar.</p>
</div>

<p>Under projektet har jag kört phpcs, phpmd och phpstan (nivå 5) kontinuerligt och åtgärdat en del varningar.
Andra varningar har jag stängt av, det gäller främst de autogenererade filerna i src/Entity och src/Repository.
Det anmärktes bland annat på att id är ett för kort variabelnamn, att id bara returneras och att bool används
som argument till metoder.</p>

<h3>Krav 4</h3>
<p>Jag gjorde ett av de optionella kraven, att skriva en artikel på temat “snygg och god kod”. Som grund använde
jag texten från uppgiften i kmom06 och dykte mer djupt ner i begreppen 4C. Jag diskuterar mer generellt om
begreppen och ger mer generella exempel på hur man kan tolka mätvärdena. Det finns alltid “specialfall” som gör
att man kan få något dåligt mätvärde men koden kan ändå vara “snygg och god”. Det finns även specialfall där
mätvärden kan luras. Till exempel 100% kodtäckning men testerna är så pass “enkla” att innehållet aldrig testas
på djupet. Jag avslutar med min personliga åsikt.</p>

<h3>Allmänt om projektet</h3>
<div class="reporttext">
    <p>Projektet som helhet är ganska bra, även om jag valde en projektidé som blev på gränsen till för
    omfattande. Räddningen blev lite att jag gjorde klasser och tester för kort och kortlek tidigare i kursen
    och nu kunde bygga vidare på den koden. Jag valde en ganska komplex projektidé, alltså att poker är ganska
    komplext. Det kändes som jag fokuserade mer på att få spelet att fungera än att skriva snygg kod. I slutändan
    är jag dock ganska nöjd både med spelet och snygg kod även om mätvärden för komplexitet inte är så bra.</p>
</div>

<p>Mitt projekt är helt klart rimligt för kursen, man fick möjlighet också att själv välja projektidé. Det gav
möjligheten att sätta lite som egen nivå och göra något man tycker om. Däremot blev jag lite fundersam på
hållbarhet som projekt. Det kändes som att den projektidén går lite utanför kursen och använder databasen på
ett sätt som vi tidigare inte gjort i kursen. I ett projekt tycker jag inte man ska behöva lära sig mycket nytt
(förutom för betyg A) utan använda det man lärt sig i kursmomenten.</p>

<h3>Om kursen</h3>
<p>Kursen som helhet tycker jag är ganska bra, betyg 8/10. Det finns en del i upplägget som eventuellt kan
förändras. Några förslag:
<br>

*kmom02 blev för omfattande. Bra av Mikael att minska efter våra (studenternas) önskemål.
<br>

*Kortspelet - visa hur man kan få till kort med CSS. Den uppgiften bör fokusera på programmering av spelet och
inte design av korten. Eller ge oss mer tid och se CSS för korten som en större del av uppgiften än den är idag.
<br>

*kmom05 kan utvecklas genom att visa hur man kan använda databasen mer. Tänk att det ska vara en hjälp inför projektet.
<br>

*kmom06 blev lite märkligt när man skulle göra ändringar enligt mätvärden som redan var ganska bra. Kanske att
man bara ska skriva om förbättringar man kan göra och se det som optionellt att implementera förbättringarna.
<br>

*Pseudokod och flödesschema behöver förklaras bättre med mer exempel kopplade till kod och inte bara generella
exempel om det ska vara kvar i kursen.</p>

{% endblock %}
