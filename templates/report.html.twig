{% extends "base.html.twig" %}

{% block title %}Redovisningar{% endblock %}

{% block content %}
<h1>Redovisningar</h1>

<h2>Kmom01</h2>
<div class="reporttext">
    <p>Jag har tidigare arbetat med PHP i kursen Webtec och i kursen design blev jag bekant med Twig och
    fördjupade mina kunskaper inom style CSS. Innan jag började studera på BTH Webbprogrammering hade jag
    förkunskaper i grunderna om HTML och CSS från kursen Webbutveckling på gymnasiet. Där läste jag också
    kursen Programmering 2 där jag arbetade med grunderna i objektorienterad programmering i Python.</p>
</div>

<div class="reporttext">
    <p>Innan man börjar med att skapa egna klasser i PHP bör man känna till språket. Det innebär bland
    annat att man vet hur man deklarerar variabler, delar upp sin kod i filer, hur man använder operatorer,
    strängar, arrayer, if-satser, loopar. Det är bra om man vet hur man använder fördefinierade variabler
    som $_SERVER och $_SESSION. Det är också bra om man känner till inbyggda funktioner som header().
    Inom klasser är det bra att ha kännedom om mutable/immutable objekt, alltså om objektet kan ändras på
    i efterhand. Det är också bra att veta när man ska göra variabler och metoder privata eller publika i
    klasser.</p>
</div>

<div class="reporttext">
    <p>Stukturen i me/report upplevde jag först vara lite krånglig och omfattande. Men jag börjar komma in i
    strukturen allt mer. Det finns många filer som behöver finnas för att det ska fungera, men jag behöver
    inte skapa eget innehåll i många av filerna. Det är främst i mapparna public, src och templates jag
    behöver arbeta.</p>
</div>

<div class="reporttext">
    <p>När jag läser artikeln “PHP The Right Way” tänker jag på att jag i min kod vill utnyttja så mycket som
    möjligt av det som språket PHP erbjuder. Jag ser fram emot att lära mig mer om klasser och se om det finns
    några begränsningar jämfört med andra programmeringsspråk. Jag ser även fram emot att koppla PHP mot
    databaser. Något som jag också är viktigt är felhantering, hur man kan göra exceptions för att hantera
    när något går fel.</p>
</div>

<p>Mitt TIL för detta kursmoment är att jag kommit igång med Symfony och skapat en webbplats.</p>

<h2>Kmom02</h2>
<div class="reporttext">
    <p>Arv innebär att en klass ärver från en annan klass. Klassen som ärver är en subklass till basklassen.
    Subklassen kommer få tillgång till det publika från basklassen, som t.ex. publika attribut eller
    publika metoder. Subklassen kan även ha egna egenskaper och metoder samt överladda metoder.
    class B extends A betyder att B är subklass till basklassen A och ärver det publika från A.</p>

<div class="reporttext">
    <p>Komposition innebär att en klass består av en annan klass. I kortspels uppgiften består klassen
    kortlek av klassen kort och klassen hand av klassen kort.</p>
</div>

<div class="reporttext">
    <p>Interface är definierat som “Ett kontrakt där en klass lovar att erbjuda en viss uppsättning metoder”.
    Ett interface kan innehålla koden “public function setVariable($name, $var). Det betyder att de klasser
    som använder sig av interfacet behöver ha en metod setVariable($name, $var) för att uppfylla löftet.
    Interface är ett sätt att göra koden förberedd för återanvändning.</p>
</div>

<div class="reporttext">
    Trait används istället för multipelt arv som inte stöds i PHP. Det är ett sätt för en klass att ärva
    från flera basklasser. Trait är bra att använda när det finns kod som är användbar i flera klasser.</p>
</div>

<div class="reporttext">
    <p>Jag löste veckans uppgift i flera steg. Inledningsvis implementerade jag mina klasser och testade i
    terminalen genom att köra php-filerna. Det fungerade bra och jag övergick till att få till det på webben
    med Symfony och Twig.</p>
</div>

<div class="reporttext">
    <p>Det fungerade bra att lösa uppgiften i Symfony också. Det svåraste var att få till korten att visas på
    ett bra sätt. Jag använde unicode icons och CSS kod för att få till det. Det blev en ganska enkel variant,
    men det framgår också tydligt vad kortet har för färg och värde. Jag använder for-loopar för att loopa
    igenom array med alla kortobjekt och if-satser för att kolla om det är ett rött eller svartfärgat kort.
    För att få till det med att för varje spelare visa spelarens hand behöver jag en ytterligare for-loop som
    loopar igenom för varje spelare. Varje spelare får också ett unikt id som gör att man ser vilka kort som
    tillhör vilken spelare. Json-delen blev lite utmanande att få till på ett snyggt sätt. Unicode ikonerna
    visades inte och utskriften blev inte så snygg till en början. Jag sökte ett tag på internet innan jag
    hittade en lösning. Jag använder pretty_print och unescaped_unicode.</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig mer om konstruktioner i PHP, som arv, interface och trait.</p>

<h2>Kmom03</h2>
<div class="reporttext">
    <p>Att modellera ett kortspel med flödesdiagram och pseudokod har varit en ny bekantskap för mig.
    Jag har tidigare gjort klassdiagram och ER-modellering. Det blev ett bra hjälpmedel att göra det
    innan jag börjar programmera, då vet jag hur logiken ska fungera. Jag är dock lite osäker på hur mycket
    som ska tas med i flödesdiagram och pseudokod som anrop till metoder. Det är inte fullständiga lösningar
    som jag lämnar in, ser det främst som ett bra sätt att börja tänka innan programmeringen.</p>
</div>

<div class="reporttext">
    <p>Jag lär mig mer och mer om objektorientering i PHP och hur man bör tänka med privata/publika metoder
    och attribut. I kmom03 gjorde jag funktioner som returnerade spelaren och bankens hand och summa,
    i stället för att ha variablerna publika. I kmom02 blev det lite mycket som var publikt och det är
    något jag kommer tänka på ännu mer framöver. Att skriva snygg kod är en utmaning för mig som fortfarande
    lär mig mer om objektorientering i PHP. Jag har tänkt en del på det under arbetets gång. Efter att ha
    kört valideringen på högsta nivå 9 så fick jag många anmärkningar. Jag valde att främst lösa de med att
    deklarera variabler och vad metoderna returnerar. Jag skapade också en ny kontroller för spelet. En del
    anmärkningar känns som att jag behöver mer kunskap innan jag kan lösa de på ett bra sätt. Det finns mycket
    som kan göras bättre för att få snygg kod. Bland annat borde korten läggas till i spelarens hand i
    handklassen och inte i spelklassen, för att avlasta på koden där. Spelklassen kan också delas upp i flera klasser.</p>
</div>

<div class="reporttext">
    <p>Veckans arbete gick bra att genomföra. Direkt när jag läste uppgiften såg jag ett potentiellt problem:
    Hur ska jag hantera att ess kan vara 1 eller 14? Ett alternativ hade varit att skapa en knapp där användaren
    bestämmer värde. Jag valde dock att bestämma detta åt användaren, jag tänker att man vill komma så nära 21
    som möjligt men inte över. Därför kollar jag om spelarens handsumma är mindre än 8 och i så fall räknas ess
    som 14. Om summan överstiger 21 med ess räknat som 14 räknas istället ess som 1. Samma logik används för
    banken, som tar nya kort fram till summan 18 eller högre. Ett annat problem som jag inte räknat med var vilka
    knappar som skulle synas. När spelet hade en vinnare ville jag inte längre att användaren skulle kunna dra fler
    kort, utan istället ha en knapp för nytt spel. Jag försökte hitta någon if-sats att stoppa in, men mina försök
    misslyckades och jag fick använda session till det.</p>
</div>

<p>Mitt TIL för detta kursmoment är att jag lärt mig mer om hur man kan skriva snygg kod.</p>

<h2>Kmom04</h2>
<div class="reporttext">
    <p>Det är viktigt att testa sin kod så man upptäcker eventuella fel, att koden inte gör det man vill. Testningen
    är lik den vi gjorde i kursen oopython. Jag använde manualen för att se vilka olika assertions jag kan använda.
    Jag upplever att PHPUnit är ett mycket bra verktyg som är enkelt att förstå för att testa sin kod.</p>
</div>

<div class="reporttext">
    <p>Kodtäckningen blev totalt nästan 90%. Det blev 100% på alla klasser förutom Game som blev 85% vilket jag
    ändå är ganska nöjd med. Jag hade behövt göra en del ändringar i min kod för att testa de sista metoderna.</p>
</div>

<div class="reporttext">
    <p>Min kod är till största delen testbar. Det som kan vara svårt att testa är t.ex. shuffleCards där alla kort
    blandas och se att de verkligen blandas. Teoretiskt sätt skulle den blanda korten på samma sätt de redan är
    sorterade. Det var också klurigt att testa winner-metoderna, där jag inte riktigt lyckades testa så möjliga fall.</p>
</div>

<div class="reporttext">
    <p>Jag valde att inte göra några större förändringar i min kod då jag tycker att den är väldigt testbar.
    Den ända ändringen var att jag lade till en returnering av senaste dragna korten i min Game-klass för att
    göra den mer testbar. Om jag skulle gjort mer ändringar hade jag sätt till att ha mindre variabler publika
    och istället ha små metoder som returnerar variabeln, alltså tänkt mer på get/set metoder. Några metoder kan
    delas upp mer och jag skulle kunna göra en egen klass för handen och då omstrukturerat min kod. Jag hade kunnat
    göra mina metoder för att kontrollera vinnare på ett bättre strukturerat sätt.</p>
</div>

<div class="reporttext">
    <p>Testbar kod kan identifiera snygg och ren kod på det sättet att om en metod eller funktion gör mycket
    (innehåller mycket kod) så blir det svårare att testa. Det bästa ur testperspektivet är att ha små klasser och
    små metoder, vilket gör att koden blir både mer lättläst, lätt att förstå och lätt att testa.</p>
</div>

<div class="reporttext">
    <p>Uppgiften gick utan problem med undantag för att jag hade gjort misstag i mina mappnamn och namespace.
    Det gjorde att det blev konflikt med composer require —dev symfony/test-pack som gjorde att testerna först
    inte hittade mina klasser genom namespace.</p>
</div>

<p>TIL för detta kursmoment är att jag lärt mig att göra enhetstester med phpunit.</p>

<h2>Kmom05</h2>

<h2>Kmom06</h2>

<h2>Kmom10</h2>

{% endblock %}
